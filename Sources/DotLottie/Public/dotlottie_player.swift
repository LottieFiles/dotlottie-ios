// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(DotLottiePlayer)
    import DotLottiePlayer
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_dotlottie_player_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_dotlottie_player_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol DotLottiePlayerProtocol: AnyObject {
    func activeAnimationId() -> String

    func activeStateMachineId() -> String

    func activeThemeId() -> String

    func animationSize() -> [Float]

    func bufferLen() -> UInt64

    func bufferPtr() -> UInt64

    func clear()

    func config() -> Config

    func currentFrame() -> Float

    func duration() -> Float

    func getLayerBounds(layerName: String) -> [Float]

    func getStateMachine(stateMachineId: String) -> String

    func instanceId() -> UInt32

    func intersect(x: Float, y: Float, layerName: String) -> Bool

    func isComplete() -> Bool

    func isLoaded() -> Bool

    func isPaused() -> Bool

    func isPlaying() -> Bool

    func isStopped() -> Bool

    func isTweening() -> Bool

    func loadAnimation(animationId: String, width: UInt32, height: UInt32) -> Bool

    func loadAnimationData(animationData: String, width: UInt32, height: UInt32) -> Bool

    func loadAnimationPath(animationPath: String, width: UInt32, height: UInt32) -> Bool

    func loadDotlottieData(fileData: Data, width: UInt32, height: UInt32) -> Bool

    func loopCount() -> UInt32

    func manifest() -> Manifest?

    func manifestString() -> String

    func markers() -> [Marker]

    func pause() -> Bool

    func play() -> Bool

    func render() -> Bool

    func requestFrame() -> Float

    func resetTheme() -> Bool

    func resize(width: UInt32, height: UInt32) -> Bool

    func seek(no: Float) -> Bool

    func segmentDuration() -> Float

    func setConfig(config: Config)

    func setFrame(no: Float) -> Bool

    func setSlots(slots: String) -> Bool

    func setTheme(themeId: String) -> Bool

    func setThemeData(themeData: String) -> Bool

    func setViewport(x: Int32, y: Int32, w: Int32, h: Int32) -> Bool

    func stateMachineCurrentState() -> String

    func stateMachineFireEvent(event: String)

    func stateMachineFrameworkSetup() -> [String]

    func stateMachineFrameworkSubscribe(observer: StateMachineObserver) -> Bool

    func stateMachineFrameworkUnsubscribe(observer: StateMachineObserver) -> Bool

    func stateMachineGetBooleanInput(key: String) -> Bool

    func stateMachineGetNumericInput(key: String) -> Float

    func stateMachineGetStringInput(key: String) -> String

    func stateMachineLoad(stateMachineId: String) -> Bool

    func stateMachineLoadData(stateMachine: String) -> Bool

    func stateMachineOverrideCurrentState(stateName: String, doTick: Bool) -> Bool

    func stateMachinePostClickEvent(x: Float, y: Float) -> Int32

    func stateMachinePostEvent(event: Event) -> Int32

    func stateMachinePostPointerDownEvent(x: Float, y: Float) -> Int32

    func stateMachinePostPointerEnterEvent(x: Float, y: Float) -> Int32

    func stateMachinePostPointerExitEvent(x: Float, y: Float) -> Int32

    func stateMachinePostPointerMoveEvent(x: Float, y: Float) -> Int32

    func stateMachinePostPointerUpEvent(x: Float, y: Float) -> Int32

    func stateMachineSetBooleanInput(key: String, value: Bool) -> Bool

    func stateMachineSetNumericInput(key: String, value: Float) -> Bool

    func stateMachineSetStringInput(key: String, value: String) -> Bool

    func stateMachineStart(openUrl: OpenUrl) -> Bool

    func stateMachineStatus() -> String

    func stateMachineStop() -> Bool

    func stateMachineSubscribe(observer: StateMachineObserver) -> Bool

    func stateMachineUnsubscribe(observer: StateMachineObserver) -> Bool

    func stop() -> Bool

    func subscribe(observer: Observer)

    func tick() -> Bool

    func totalFrames() -> Float

    func tween(to: Float, duration: Float?, easing: [Float]?) -> Bool

    func tweenStop() -> Bool

    func tweenToMarker(marker: String, duration: Float?, easing: [Float]?) -> Bool

    func tweenUpdate(progress: Float?) -> Bool

    func unsubscribe(observer: Observer)
}

open class DotLottiePlayer:
    DotLottiePlayerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_dotlottie_player_fn_clone_dotlottieplayer(self.pointer, $0) }
    }

    public convenience init(config: Config) {
        let pointer =
            try! rustCall {
                uniffi_dotlottie_player_fn_constructor_dotlottieplayer_new(
                    FfiConverterTypeConfig.lower(config), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_dotlottie_player_fn_free_dotlottieplayer(pointer, $0) }
    }

    open func activeAnimationId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_active_animation_id(self.uniffiClonePointer(), $0)
        })
    }

    open func activeStateMachineId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_active_state_machine_id(self.uniffiClonePointer(), $0)
        })
    }

    open func activeThemeId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_active_theme_id(self.uniffiClonePointer(), $0)
        })
    }

    open func animationSize() -> [Float] {
        return try! FfiConverterSequenceFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_animation_size(self.uniffiClonePointer(), $0)
        })
    }

    open func bufferLen() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_buffer_len(self.uniffiClonePointer(), $0)
        })
    }

    open func bufferPtr() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_buffer_ptr(self.uniffiClonePointer(), $0)
        })
    }

    open func clear() { try! rustCall {
        uniffi_dotlottie_player_fn_method_dotlottieplayer_clear(self.uniffiClonePointer(), $0)
    }
    }

    open func config() -> Config {
        return try! FfiConverterTypeConfig.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_config(self.uniffiClonePointer(), $0)
        })
    }

    open func currentFrame() -> Float {
        return try! FfiConverterFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_current_frame(self.uniffiClonePointer(), $0)
        })
    }

    open func duration() -> Float {
        return try! FfiConverterFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_duration(self.uniffiClonePointer(), $0)
        })
    }

    open func getLayerBounds(layerName: String) -> [Float] {
        return try! FfiConverterSequenceFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_get_layer_bounds(self.uniffiClonePointer(),
                                                                               FfiConverterString.lower(layerName), $0)
        })
    }

    open func getStateMachine(stateMachineId: String) -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_get_state_machine(self.uniffiClonePointer(),
                                                                                FfiConverterString.lower(stateMachineId), $0)
        })
    }

    open func instanceId() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_instance_id(self.uniffiClonePointer(), $0)
        })
    }

    open func intersect(x: Float, y: Float, layerName: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_intersect(self.uniffiClonePointer(),
                                                                        FfiConverterFloat.lower(x),
                                                                        FfiConverterFloat.lower(y),
                                                                        FfiConverterString.lower(layerName), $0)
        })
    }

    open func isComplete() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_is_complete(self.uniffiClonePointer(), $0)
        })
    }

    open func isLoaded() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_is_loaded(self.uniffiClonePointer(), $0)
        })
    }

    open func isPaused() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_is_paused(self.uniffiClonePointer(), $0)
        })
    }

    open func isPlaying() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_is_playing(self.uniffiClonePointer(), $0)
        })
    }

    open func isStopped() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_is_stopped(self.uniffiClonePointer(), $0)
        })
    }

    open func isTweening() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_is_tweening(self.uniffiClonePointer(), $0)
        })
    }

    open func loadAnimation(animationId: String, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_load_animation(self.uniffiClonePointer(),
                                                                             FfiConverterString.lower(animationId),
                                                                             FfiConverterUInt32.lower(width),
                                                                             FfiConverterUInt32.lower(height), $0)
        })
    }

    open func loadAnimationData(animationData: String, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_load_animation_data(self.uniffiClonePointer(),
                                                                                  FfiConverterString.lower(animationData),
                                                                                  FfiConverterUInt32.lower(width),
                                                                                  FfiConverterUInt32.lower(height), $0)
        })
    }

    open func loadAnimationPath(animationPath: String, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_load_animation_path(self.uniffiClonePointer(),
                                                                                  FfiConverterString.lower(animationPath),
                                                                                  FfiConverterUInt32.lower(width),
                                                                                  FfiConverterUInt32.lower(height), $0)
        })
    }

    open func loadDotlottieData(fileData: Data, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_load_dotlottie_data(self.uniffiClonePointer(),
                                                                                  FfiConverterData.lower(fileData),
                                                                                  FfiConverterUInt32.lower(width),
                                                                                  FfiConverterUInt32.lower(height), $0)
        })
    }

    open func loopCount() -> UInt32 {
        return try! FfiConverterUInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_loop_count(self.uniffiClonePointer(), $0)
        })
    }

    open func manifest() -> Manifest? {
        return try! FfiConverterOptionTypeManifest.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_manifest(self.uniffiClonePointer(), $0)
        })
    }

    open func manifestString() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_manifest_string(self.uniffiClonePointer(), $0)
        })
    }

    open func markers() -> [Marker] {
        return try! FfiConverterSequenceTypeMarker.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_markers(self.uniffiClonePointer(), $0)
        })
    }

    open func pause() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_pause(self.uniffiClonePointer(), $0)
        })
    }

    open func play() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_play(self.uniffiClonePointer(), $0)
        })
    }

    open func render() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_render(self.uniffiClonePointer(), $0)
        })
    }

    open func requestFrame() -> Float {
        return try! FfiConverterFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_request_frame(self.uniffiClonePointer(), $0)
        })
    }

    open func resetTheme() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_reset_theme(self.uniffiClonePointer(), $0)
        })
    }

    open func resize(width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_resize(self.uniffiClonePointer(),
                                                                     FfiConverterUInt32.lower(width),
                                                                     FfiConverterUInt32.lower(height), $0)
        })
    }

    open func seek(no: Float) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_seek(self.uniffiClonePointer(),
                                                                   FfiConverterFloat.lower(no), $0)
        })
    }

    open func segmentDuration() -> Float {
        return try! FfiConverterFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_segment_duration(self.uniffiClonePointer(), $0)
        })
    }

    open func setConfig(config: Config) { try! rustCall {
        uniffi_dotlottie_player_fn_method_dotlottieplayer_set_config(self.uniffiClonePointer(),
                                                                     FfiConverterTypeConfig.lower(config), $0)
    }
    }

    open func setFrame(no: Float) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_set_frame(self.uniffiClonePointer(),
                                                                        FfiConverterFloat.lower(no), $0)
        })
    }

    open func setSlots(slots: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_set_slots(self.uniffiClonePointer(),
                                                                        FfiConverterString.lower(slots), $0)
        })
    }

    open func setTheme(themeId: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_set_theme(self.uniffiClonePointer(),
                                                                        FfiConverterString.lower(themeId), $0)
        })
    }

    open func setThemeData(themeData: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_set_theme_data(self.uniffiClonePointer(),
                                                                             FfiConverterString.lower(themeData), $0)
        })
    }

    open func setViewport(x: Int32, y: Int32, w: Int32, h: Int32) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_set_viewport(self.uniffiClonePointer(),
                                                                           FfiConverterInt32.lower(x),
                                                                           FfiConverterInt32.lower(y),
                                                                           FfiConverterInt32.lower(w),
                                                                           FfiConverterInt32.lower(h), $0)
        })
    }

    open func stateMachineCurrentState() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_current_state(self.uniffiClonePointer(), $0)
        })
    }

    open func stateMachineFireEvent(event: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_fire_event(self.uniffiClonePointer(),
                                                                                   FfiConverterString.lower(event), $0)
    }
    }

    open func stateMachineFrameworkSetup() -> [String] {
        return try! FfiConverterSequenceString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_framework_setup(self.uniffiClonePointer(), $0)
        })
    }

    open func stateMachineFrameworkSubscribe(observer: StateMachineObserver) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_framework_subscribe(self.uniffiClonePointer(),
                                                                                                FfiConverterTypeStateMachineObserver.lower(observer), $0)
        })
    }

    open func stateMachineFrameworkUnsubscribe(observer: StateMachineObserver) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_framework_unsubscribe(self.uniffiClonePointer(),
                                                                                                  FfiConverterTypeStateMachineObserver.lower(observer), $0)
        })
    }

    open func stateMachineGetBooleanInput(key: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_get_boolean_input(self.uniffiClonePointer(),
                                                                                              FfiConverterString.lower(key), $0)
        })
    }

    open func stateMachineGetNumericInput(key: String) -> Float {
        return try! FfiConverterFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_get_numeric_input(self.uniffiClonePointer(),
                                                                                              FfiConverterString.lower(key), $0)
        })
    }

    open func stateMachineGetStringInput(key: String) -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_get_string_input(self.uniffiClonePointer(),
                                                                                             FfiConverterString.lower(key), $0)
        })
    }

    open func stateMachineLoad(stateMachineId: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_load(self.uniffiClonePointer(),
                                                                                 FfiConverterString.lower(stateMachineId), $0)
        })
    }

    open func stateMachineLoadData(stateMachine: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_load_data(self.uniffiClonePointer(),
                                                                                      FfiConverterString.lower(stateMachine), $0)
        })
    }

    open func stateMachineOverrideCurrentState(stateName: String, doTick: Bool) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_override_current_state(self.uniffiClonePointer(),
                                                                                                   FfiConverterString.lower(stateName),
                                                                                                   FfiConverterBool.lower(doTick), $0)
        })
    }

    open func stateMachinePostClickEvent(x: Float, y: Float) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_click_event(self.uniffiClonePointer(),
                                                                                             FfiConverterFloat.lower(x),
                                                                                             FfiConverterFloat.lower(y), $0)
        })
    }

    open func stateMachinePostEvent(event: Event) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_event(self.uniffiClonePointer(),
                                                                                       FfiConverterTypeEvent.lower(event), $0)
        })
    }

    open func stateMachinePostPointerDownEvent(x: Float, y: Float) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_pointer_down_event(self.uniffiClonePointer(),
                                                                                                    FfiConverterFloat.lower(x),
                                                                                                    FfiConverterFloat.lower(y), $0)
        })
    }

    open func stateMachinePostPointerEnterEvent(x: Float, y: Float) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_pointer_enter_event(self.uniffiClonePointer(),
                                                                                                     FfiConverterFloat.lower(x),
                                                                                                     FfiConverterFloat.lower(y), $0)
        })
    }

    open func stateMachinePostPointerExitEvent(x: Float, y: Float) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_pointer_exit_event(self.uniffiClonePointer(),
                                                                                                    FfiConverterFloat.lower(x),
                                                                                                    FfiConverterFloat.lower(y), $0)
        })
    }

    open func stateMachinePostPointerMoveEvent(x: Float, y: Float) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_pointer_move_event(self.uniffiClonePointer(),
                                                                                                    FfiConverterFloat.lower(x),
                                                                                                    FfiConverterFloat.lower(y), $0)
        })
    }

    open func stateMachinePostPointerUpEvent(x: Float, y: Float) -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_post_pointer_up_event(self.uniffiClonePointer(),
                                                                                                  FfiConverterFloat.lower(x),
                                                                                                  FfiConverterFloat.lower(y), $0)
        })
    }

    open func stateMachineSetBooleanInput(key: String, value: Bool) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_set_boolean_input(self.uniffiClonePointer(),
                                                                                              FfiConverterString.lower(key),
                                                                                              FfiConverterBool.lower(value), $0)
        })
    }

    open func stateMachineSetNumericInput(key: String, value: Float) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_set_numeric_input(self.uniffiClonePointer(),
                                                                                              FfiConverterString.lower(key),
                                                                                              FfiConverterFloat.lower(value), $0)
        })
    }

    open func stateMachineSetStringInput(key: String, value: String) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_set_string_input(self.uniffiClonePointer(),
                                                                                             FfiConverterString.lower(key),
                                                                                             FfiConverterString.lower(value), $0)
        })
    }

    open func stateMachineStart(openUrl: OpenUrl) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_start(self.uniffiClonePointer(),
                                                                                  FfiConverterTypeOpenUrl.lower(openUrl), $0)
        })
    }

    open func stateMachineStatus() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_status(self.uniffiClonePointer(), $0)
        })
    }

    open func stateMachineStop() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_stop(self.uniffiClonePointer(), $0)
        })
    }

    open func stateMachineSubscribe(observer: StateMachineObserver) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_subscribe(self.uniffiClonePointer(),
                                                                                      FfiConverterTypeStateMachineObserver.lower(observer), $0)
        })
    }

    open func stateMachineUnsubscribe(observer: StateMachineObserver) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_state_machine_unsubscribe(self.uniffiClonePointer(),
                                                                                        FfiConverterTypeStateMachineObserver.lower(observer), $0)
        })
    }

    open func stop() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_stop(self.uniffiClonePointer(), $0)
        })
    }

    open func subscribe(observer: Observer) { try! rustCall {
        uniffi_dotlottie_player_fn_method_dotlottieplayer_subscribe(self.uniffiClonePointer(),
                                                                    FfiConverterTypeObserver.lower(observer), $0)
    }
    }

    open func tick() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_tick(self.uniffiClonePointer(), $0)
        })
    }

    open func totalFrames() -> Float {
        return try! FfiConverterFloat.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_total_frames(self.uniffiClonePointer(), $0)
        })
    }

    open func tween(to: Float, duration: Float?, easing: [Float]?) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_tween(self.uniffiClonePointer(),
                                                                    FfiConverterFloat.lower(to),
                                                                    FfiConverterOptionFloat.lower(duration),
                                                                    FfiConverterOptionSequenceFloat.lower(easing), $0)
        })
    }

    open func tweenStop() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_tween_stop(self.uniffiClonePointer(), $0)
        })
    }

    open func tweenToMarker(marker: String, duration: Float?, easing: [Float]?) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_tween_to_marker(self.uniffiClonePointer(),
                                                                              FfiConverterString.lower(marker),
                                                                              FfiConverterOptionFloat.lower(duration),
                                                                              FfiConverterOptionSequenceFloat.lower(easing), $0)
        })
    }

    open func tweenUpdate(progress: Float?) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_dotlottie_player_fn_method_dotlottieplayer_tween_update(self.uniffiClonePointer(),
                                                                           FfiConverterOptionFloat.lower(progress), $0)
        })
    }

    open func unsubscribe(observer: Observer) { try! rustCall {
        uniffi_dotlottie_player_fn_method_dotlottieplayer_unsubscribe(self.uniffiClonePointer(),
                                                                      FfiConverterTypeObserver.lower(observer), $0)
    }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDotLottiePlayer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DotLottiePlayer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DotLottiePlayer {
        return DotLottiePlayer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DotLottiePlayer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DotLottiePlayer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DotLottiePlayer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDotLottiePlayer_lift(_ pointer: UnsafeMutableRawPointer) throws -> DotLottiePlayer {
    return try FfiConverterTypeDotLottiePlayer.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDotLottiePlayer_lower(_ value: DotLottiePlayer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDotLottiePlayer.lower(value)
}

public protocol Observer: AnyObject {
    func onComplete()

    func onFrame(frameNo: Float)

    func onLoad()

    func onLoadError()

    func onLoop(loopCount: UInt32)

    func onPause()

    func onPlay()

    func onRender(frameNo: Float)

    func onStop()
}

open class ObserverImpl:
    Observer
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_dotlottie_player_fn_clone_observer(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_dotlottie_player_fn_free_observer(pointer, $0) }
    }

    open func onComplete() { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_complete(self.uniffiClonePointer(), $0)
    }
    }

    open func onFrame(frameNo: Float) { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_frame(self.uniffiClonePointer(),
                                                            FfiConverterFloat.lower(frameNo), $0)
    }
    }

    open func onLoad() { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_load(self.uniffiClonePointer(), $0)
    }
    }

    open func onLoadError() { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_load_error(self.uniffiClonePointer(), $0)
    }
    }

    open func onLoop(loopCount: UInt32) { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_loop(self.uniffiClonePointer(),
                                                           FfiConverterUInt32.lower(loopCount), $0)
    }
    }

    open func onPause() { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_pause(self.uniffiClonePointer(), $0)
    }
    }

    open func onPlay() { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_play(self.uniffiClonePointer(), $0)
    }
    }

    open func onRender(frameNo: Float) { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_render(self.uniffiClonePointer(),
                                                             FfiConverterFloat.lower(frameNo), $0)
    }
    }

    open func onStop() { try! rustCall {
        uniffi_dotlottie_player_fn_method_observer_on_stop(self.uniffiClonePointer(), $0)
    }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceObserver {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceObserver = .init(
        onComplete: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onComplete(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onFrame: { (
            uniffiHandle: UInt64,
            frameNo: Float,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onFrame(
                    frameNo: FfiConverterFloat.lift(frameNo)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onLoad: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onLoad(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onLoadError: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onLoadError(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onLoop: { (
            uniffiHandle: UInt64,
            loopCount: UInt32,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onLoop(
                    loopCount: FfiConverterUInt32.lift(loopCount)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onPause: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onPause(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onPlay: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onPlay(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onRender: { (
            uniffiHandle: UInt64,
            frameNo: Float,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onRender(
                    frameNo: FfiConverterFloat.lift(frameNo)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStop: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onStop(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeObserver.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Observer: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitObserver() {
    uniffi_dotlottie_player_fn_init_callback_vtable_observer(&UniffiCallbackInterfaceObserver.vtable)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeObserver: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<Observer>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Observer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Observer {
        return ObserverImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Observer) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Observer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Observer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeObserver_lift(_ pointer: UnsafeMutableRawPointer) throws -> Observer {
    return try FfiConverterTypeObserver.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeObserver_lower(_ value: Observer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeObserver.lower(value)
}

public protocol StateMachineObserver: AnyObject {
    func onBooleanInputValueChange(inputName: String, oldValue: Bool, newValue: Bool)

    func onCustomEvent(message: String)

    func onError(message: String)

    func onInputFired(inputName: String)

    func onNumericInputValueChange(inputName: String, oldValue: Float, newValue: Float)

    func onStart()

    func onStateEntered(enteringState: String)

    func onStateExit(leavingState: String)

    func onStop()

    func onStringInputValueChange(inputName: String, oldValue: String, newValue: String)

    func onTransition(previousState: String, newState: String)
}

open class StateMachineObserverImpl:
    StateMachineObserver
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_dotlottie_player_fn_clone_statemachineobserver(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_dotlottie_player_fn_free_statemachineobserver(pointer, $0) }
    }

    open func onBooleanInputValueChange(inputName: String, oldValue: Bool, newValue: Bool) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_boolean_input_value_change(self.uniffiClonePointer(),
                                                                                             FfiConverterString.lower(inputName),
                                                                                             FfiConverterBool.lower(oldValue),
                                                                                             FfiConverterBool.lower(newValue), $0)
    }
    }

    open func onCustomEvent(message: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_custom_event(self.uniffiClonePointer(),
                                                                               FfiConverterString.lower(message), $0)
    }
    }

    open func onError(message: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_error(self.uniffiClonePointer(),
                                                                        FfiConverterString.lower(message), $0)
    }
    }

    open func onInputFired(inputName: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_input_fired(self.uniffiClonePointer(),
                                                                              FfiConverterString.lower(inputName), $0)
    }
    }

    open func onNumericInputValueChange(inputName: String, oldValue: Float, newValue: Float) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_numeric_input_value_change(self.uniffiClonePointer(),
                                                                                             FfiConverterString.lower(inputName),
                                                                                             FfiConverterFloat.lower(oldValue),
                                                                                             FfiConverterFloat.lower(newValue), $0)
    }
    }

    open func onStart() { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_start(self.uniffiClonePointer(), $0)
    }
    }

    open func onStateEntered(enteringState: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_state_entered(self.uniffiClonePointer(),
                                                                                FfiConverterString.lower(enteringState), $0)
    }
    }

    open func onStateExit(leavingState: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_state_exit(self.uniffiClonePointer(),
                                                                             FfiConverterString.lower(leavingState), $0)
    }
    }

    open func onStop() { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_stop(self.uniffiClonePointer(), $0)
    }
    }

    open func onStringInputValueChange(inputName: String, oldValue: String, newValue: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_string_input_value_change(self.uniffiClonePointer(),
                                                                                            FfiConverterString.lower(inputName),
                                                                                            FfiConverterString.lower(oldValue),
                                                                                            FfiConverterString.lower(newValue), $0)
    }
    }

    open func onTransition(previousState: String, newState: String) { try! rustCall {
        uniffi_dotlottie_player_fn_method_statemachineobserver_on_transition(self.uniffiClonePointer(),
                                                                             FfiConverterString.lower(previousState),
                                                                             FfiConverterString.lower(newState), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceStateMachineObserver {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceStateMachineObserver = .init(
        onBooleanInputValueChange: { (
            uniffiHandle: UInt64,
            inputName: RustBuffer,
            oldValue: Int8,
            newValue: Int8,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onBooleanInputValueChange(
                    inputName: FfiConverterString.lift(inputName),
                    oldValue: FfiConverterBool.lift(oldValue),
                    newValue: FfiConverterBool.lift(newValue)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onCustomEvent: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onCustomEvent(
                    message: FfiConverterString.lift(message)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onError: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onError(
                    message: FfiConverterString.lift(message)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onInputFired: { (
            uniffiHandle: UInt64,
            inputName: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onInputFired(
                    inputName: FfiConverterString.lift(inputName)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onNumericInputValueChange: { (
            uniffiHandle: UInt64,
            inputName: RustBuffer,
            oldValue: Float,
            newValue: Float,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onNumericInputValueChange(
                    inputName: FfiConverterString.lift(inputName),
                    oldValue: FfiConverterFloat.lift(oldValue),
                    newValue: FfiConverterFloat.lift(newValue)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStart: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onStart(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStateEntered: { (
            uniffiHandle: UInt64,
            enteringState: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onStateEntered(
                    enteringState: FfiConverterString.lift(enteringState)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStateExit: { (
            uniffiHandle: UInt64,
            leavingState: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onStateExit(
                    leavingState: FfiConverterString.lift(leavingState)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStop: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onStop(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStringInputValueChange: { (
            uniffiHandle: UInt64,
            inputName: RustBuffer,
            oldValue: RustBuffer,
            newValue: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onStringInputValueChange(
                    inputName: FfiConverterString.lift(inputName),
                    oldValue: FfiConverterString.lift(oldValue),
                    newValue: FfiConverterString.lift(newValue)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onTransition: { (
            uniffiHandle: UInt64,
            previousState: RustBuffer,
            newState: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeStateMachineObserver.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.onTransition(
                    previousState: FfiConverterString.lift(previousState),
                    newState: FfiConverterString.lift(newState)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeStateMachineObserver.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface StateMachineObserver: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitStateMachineObserver() {
    uniffi_dotlottie_player_fn_init_callback_vtable_statemachineobserver(&UniffiCallbackInterfaceStateMachineObserver.vtable)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeStateMachineObserver: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<StateMachineObserver>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = StateMachineObserver

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> StateMachineObserver {
        return StateMachineObserverImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: StateMachineObserver) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StateMachineObserver {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: StateMachineObserver, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStateMachineObserver_lift(_ pointer: UnsafeMutableRawPointer) throws -> StateMachineObserver {
    return try FfiConverterTypeStateMachineObserver.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeStateMachineObserver_lower(_ value: StateMachineObserver) -> UnsafeMutableRawPointer {
    return FfiConverterTypeStateMachineObserver.lower(value)
}

public struct Config {
    public var autoplay: Bool
    public var loopAnimation: Bool
    public var mode: Mode
    public var speed: Float
    public var useFrameInterpolation: Bool
    public var segment: [Float]
    public var backgroundColor: UInt32
    public var layout: Layout
    public var marker: String
    public var themeId: String
    public var stateMachineId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(autoplay: Bool, loopAnimation: Bool, mode: Mode, speed: Float, useFrameInterpolation: Bool, segment: [Float], backgroundColor: UInt32, layout: Layout, marker: String, themeId: String, stateMachineId: String) {
        self.autoplay = autoplay
        self.loopAnimation = loopAnimation
        self.mode = mode
        self.speed = speed
        self.useFrameInterpolation = useFrameInterpolation
        self.segment = segment
        self.backgroundColor = backgroundColor
        self.layout = layout
        self.marker = marker
        self.themeId = themeId
        self.stateMachineId = stateMachineId
    }
}

extension Config: Equatable, Hashable {
    public static func == (lhs: Config, rhs: Config) -> Bool {
        if lhs.autoplay != rhs.autoplay {
            return false
        }
        if lhs.loopAnimation != rhs.loopAnimation {
            return false
        }
        if lhs.mode != rhs.mode {
            return false
        }
        if lhs.speed != rhs.speed {
            return false
        }
        if lhs.useFrameInterpolation != rhs.useFrameInterpolation {
            return false
        }
        if lhs.segment != rhs.segment {
            return false
        }
        if lhs.backgroundColor != rhs.backgroundColor {
            return false
        }
        if lhs.layout != rhs.layout {
            return false
        }
        if lhs.marker != rhs.marker {
            return false
        }
        if lhs.themeId != rhs.themeId {
            return false
        }
        if lhs.stateMachineId != rhs.stateMachineId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(autoplay)
        hasher.combine(loopAnimation)
        hasher.combine(mode)
        hasher.combine(speed)
        hasher.combine(useFrameInterpolation)
        hasher.combine(segment)
        hasher.combine(backgroundColor)
        hasher.combine(layout)
        hasher.combine(marker)
        hasher.combine(themeId)
        hasher.combine(stateMachineId)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                autoplay: FfiConverterBool.read(from: &buf),
                loopAnimation: FfiConverterBool.read(from: &buf),
                mode: FfiConverterTypeMode.read(from: &buf),
                speed: FfiConverterFloat.read(from: &buf),
                useFrameInterpolation: FfiConverterBool.read(from: &buf),
                segment: FfiConverterSequenceFloat.read(from: &buf),
                backgroundColor: FfiConverterUInt32.read(from: &buf),
                layout: FfiConverterTypeLayout.read(from: &buf),
                marker: FfiConverterString.read(from: &buf),
                themeId: FfiConverterString.read(from: &buf),
                stateMachineId: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.autoplay, into: &buf)
        FfiConverterBool.write(value.loopAnimation, into: &buf)
        FfiConverterTypeMode.write(value.mode, into: &buf)
        FfiConverterFloat.write(value.speed, into: &buf)
        FfiConverterBool.write(value.useFrameInterpolation, into: &buf)
        FfiConverterSequenceFloat.write(value.segment, into: &buf)
        FfiConverterUInt32.write(value.backgroundColor, into: &buf)
        FfiConverterTypeLayout.write(value.layout, into: &buf)
        FfiConverterString.write(value.marker, into: &buf)
        FfiConverterString.write(value.themeId, into: &buf)
        FfiConverterString.write(value.stateMachineId, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}

public struct Layout {
    public var fit: Fit
    public var align: [Float]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fit: Fit, align: [Float]) {
        self.fit = fit
        self.align = align
    }
}

extension Layout: Equatable, Hashable {
    public static func == (lhs: Layout, rhs: Layout) -> Bool {
        if lhs.fit != rhs.fit {
            return false
        }
        if lhs.align != rhs.align {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fit)
        hasher.combine(align)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeLayout: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Layout {
        return
            try Layout(
                fit: FfiConverterTypeFit.read(from: &buf),
                align: FfiConverterSequenceFloat.read(from: &buf)
            )
    }

    public static func write(_ value: Layout, into buf: inout [UInt8]) {
        FfiConverterTypeFit.write(value.fit, into: &buf)
        FfiConverterSequenceFloat.write(value.align, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLayout_lift(_ buf: RustBuffer) throws -> Layout {
    return try FfiConverterTypeLayout.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLayout_lower(_ value: Layout) -> RustBuffer {
    return FfiConverterTypeLayout.lower(value)
}

public struct Manifest {
    public var version: String?
    public var generator: String?
    public var initial: ManifestInitial?
    public var animations: [ManifestAnimation]
    public var themes: [ManifestTheme]?
    public var stateMachines: [ManifestStateMachine]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(version: String?, generator: String?, initial: ManifestInitial?, animations: [ManifestAnimation], themes: [ManifestTheme]?, stateMachines: [ManifestStateMachine]?) {
        self.version = version
        self.generator = generator
        self.initial = initial
        self.animations = animations
        self.themes = themes
        self.stateMachines = stateMachines
    }
}

extension Manifest: Equatable, Hashable {
    public static func == (lhs: Manifest, rhs: Manifest) -> Bool {
        if lhs.version != rhs.version {
            return false
        }
        if lhs.generator != rhs.generator {
            return false
        }
        if lhs.initial != rhs.initial {
            return false
        }
        if lhs.animations != rhs.animations {
            return false
        }
        if lhs.themes != rhs.themes {
            return false
        }
        if lhs.stateMachines != rhs.stateMachines {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(version)
        hasher.combine(generator)
        hasher.combine(initial)
        hasher.combine(animations)
        hasher.combine(themes)
        hasher.combine(stateMachines)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeManifest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Manifest {
        return
            try Manifest(
                version: FfiConverterOptionString.read(from: &buf),
                generator: FfiConverterOptionString.read(from: &buf),
                initial: FfiConverterOptionTypeManifestInitial.read(from: &buf),
                animations: FfiConverterSequenceTypeManifestAnimation.read(from: &buf),
                themes: FfiConverterOptionSequenceTypeManifestTheme.read(from: &buf),
                stateMachines: FfiConverterOptionSequenceTypeManifestStateMachine.read(from: &buf)
            )
    }

    public static func write(_ value: Manifest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.version, into: &buf)
        FfiConverterOptionString.write(value.generator, into: &buf)
        FfiConverterOptionTypeManifestInitial.write(value.initial, into: &buf)
        FfiConverterSequenceTypeManifestAnimation.write(value.animations, into: &buf)
        FfiConverterOptionSequenceTypeManifestTheme.write(value.themes, into: &buf)
        FfiConverterOptionSequenceTypeManifestStateMachine.write(value.stateMachines, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifest_lift(_ buf: RustBuffer) throws -> Manifest {
    return try FfiConverterTypeManifest.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifest_lower(_ value: Manifest) -> RustBuffer {
    return FfiConverterTypeManifest.lower(value)
}

public struct ManifestAnimation {
    public var id: String
    public var name: String?
    public var initialTheme: String?
    public var themes: [String]?
    public var background: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String?, initialTheme: String?, themes: [String]?, background: String?) {
        self.id = id
        self.name = name
        self.initialTheme = initialTheme
        self.themes = themes
        self.background = background
    }
}

extension ManifestAnimation: Equatable, Hashable {
    public static func == (lhs: ManifestAnimation, rhs: ManifestAnimation) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.initialTheme != rhs.initialTheme {
            return false
        }
        if lhs.themes != rhs.themes {
            return false
        }
        if lhs.background != rhs.background {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(initialTheme)
        hasher.combine(themes)
        hasher.combine(background)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeManifestAnimation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManifestAnimation {
        return
            try ManifestAnimation(
                id: FfiConverterString.read(from: &buf),
                name: FfiConverterOptionString.read(from: &buf),
                initialTheme: FfiConverterOptionString.read(from: &buf),
                themes: FfiConverterOptionSequenceString.read(from: &buf),
                background: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: ManifestAnimation, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.initialTheme, into: &buf)
        FfiConverterOptionSequenceString.write(value.themes, into: &buf)
        FfiConverterOptionString.write(value.background, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestAnimation_lift(_ buf: RustBuffer) throws -> ManifestAnimation {
    return try FfiConverterTypeManifestAnimation.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestAnimation_lower(_ value: ManifestAnimation) -> RustBuffer {
    return FfiConverterTypeManifestAnimation.lower(value)
}

public struct ManifestInitial {
    public var animation: String?
    public var stateMachine: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(animation: String?, stateMachine: String?) {
        self.animation = animation
        self.stateMachine = stateMachine
    }
}

extension ManifestInitial: Equatable, Hashable {
    public static func == (lhs: ManifestInitial, rhs: ManifestInitial) -> Bool {
        if lhs.animation != rhs.animation {
            return false
        }
        if lhs.stateMachine != rhs.stateMachine {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(animation)
        hasher.combine(stateMachine)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeManifestInitial: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManifestInitial {
        return
            try ManifestInitial(
                animation: FfiConverterOptionString.read(from: &buf),
                stateMachine: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: ManifestInitial, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.animation, into: &buf)
        FfiConverterOptionString.write(value.stateMachine, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestInitial_lift(_ buf: RustBuffer) throws -> ManifestInitial {
    return try FfiConverterTypeManifestInitial.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestInitial_lower(_ value: ManifestInitial) -> RustBuffer {
    return FfiConverterTypeManifestInitial.lower(value)
}

public struct ManifestStateMachine {
    public var id: String
    public var name: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String?) {
        self.id = id
        self.name = name
    }
}

extension ManifestStateMachine: Equatable, Hashable {
    public static func == (lhs: ManifestStateMachine, rhs: ManifestStateMachine) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeManifestStateMachine: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManifestStateMachine {
        return
            try ManifestStateMachine(
                id: FfiConverterString.read(from: &buf),
                name: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: ManifestStateMachine, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionString.write(value.name, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestStateMachine_lift(_ buf: RustBuffer) throws -> ManifestStateMachine {
    return try FfiConverterTypeManifestStateMachine.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestStateMachine_lower(_ value: ManifestStateMachine) -> RustBuffer {
    return FfiConverterTypeManifestStateMachine.lower(value)
}

public struct ManifestTheme {
    public var id: String
    public var name: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String?) {
        self.id = id
        self.name = name
    }
}

extension ManifestTheme: Equatable, Hashable {
    public static func == (lhs: ManifestTheme, rhs: ManifestTheme) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeManifestTheme: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManifestTheme {
        return
            try ManifestTheme(
                id: FfiConverterString.read(from: &buf),
                name: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: ManifestTheme, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionString.write(value.name, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestTheme_lift(_ buf: RustBuffer) throws -> ManifestTheme {
    return try FfiConverterTypeManifestTheme.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeManifestTheme_lower(_ value: ManifestTheme) -> RustBuffer {
    return FfiConverterTypeManifestTheme.lower(value)
}

public struct Marker {
    public var name: String
    public var time: Float
    public var duration: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, time: Float, duration: Float) {
        self.name = name
        self.time = time
        self.duration = duration
    }
}

extension Marker: Equatable, Hashable {
    public static func == (lhs: Marker, rhs: Marker) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.time != rhs.time {
            return false
        }
        if lhs.duration != rhs.duration {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(time)
        hasher.combine(duration)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeMarker: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Marker {
        return
            try Marker(
                name: FfiConverterString.read(from: &buf),
                time: FfiConverterFloat.read(from: &buf),
                duration: FfiConverterFloat.read(from: &buf)
            )
    }

    public static func write(_ value: Marker, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterFloat.write(value.time, into: &buf)
        FfiConverterFloat.write(value.duration, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeMarker_lift(_ buf: RustBuffer) throws -> Marker {
    return try FfiConverterTypeMarker.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeMarker_lower(_ value: Marker) -> RustBuffer {
    return FfiConverterTypeMarker.lower(value)
}

public struct OpenUrl {
    public var mode: OpenUrlMode
    public var whitelist: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(mode: OpenUrlMode, whitelist: [String]) {
        self.mode = mode
        self.whitelist = whitelist
    }
}

extension OpenUrl: Equatable, Hashable {
    public static func == (lhs: OpenUrl, rhs: OpenUrl) -> Bool {
        if lhs.mode != rhs.mode {
            return false
        }
        if lhs.whitelist != rhs.whitelist {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(mode)
        hasher.combine(whitelist)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeOpenUrl: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OpenUrl {
        return
            try OpenUrl(
                mode: FfiConverterTypeOpenUrlMode.read(from: &buf),
                whitelist: FfiConverterSequenceString.read(from: &buf)
            )
    }

    public static func write(_ value: OpenUrl, into buf: inout [UInt8]) {
        FfiConverterTypeOpenUrlMode.write(value.mode, into: &buf)
        FfiConverterSequenceString.write(value.whitelist, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeOpenUrl_lift(_ buf: RustBuffer) throws -> OpenUrl {
    return try FfiConverterTypeOpenUrl.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeOpenUrl_lower(_ value: OpenUrl) -> RustBuffer {
    return FfiConverterTypeOpenUrl.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Event {
    case pointerDown(x: Float, y: Float)
    case pointerUp(x: Float, y: Float)
    case pointerMove(x: Float, y: Float)
    case pointerEnter(x: Float, y: Float)
    case pointerExit(x: Float, y: Float)
    case click(x: Float, y: Float)
    case onComplete
    case onLoopComplete
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEvent: FfiConverterRustBuffer {
    typealias SwiftType = Event

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .pointerDown(x: FfiConverterFloat.read(from: &buf), y: FfiConverterFloat.read(from: &buf))

        case 2: return try .pointerUp(x: FfiConverterFloat.read(from: &buf), y: FfiConverterFloat.read(from: &buf))

        case 3: return try .pointerMove(x: FfiConverterFloat.read(from: &buf), y: FfiConverterFloat.read(from: &buf))

        case 4: return try .pointerEnter(x: FfiConverterFloat.read(from: &buf), y: FfiConverterFloat.read(from: &buf))

        case 5: return try .pointerExit(x: FfiConverterFloat.read(from: &buf), y: FfiConverterFloat.read(from: &buf))

        case 6: return try .click(x: FfiConverterFloat.read(from: &buf), y: FfiConverterFloat.read(from: &buf))

        case 7: return .onComplete

        case 8: return .onLoopComplete

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        switch value {
        case let .pointerDown(x, y):
            writeInt(&buf, Int32(1))
            FfiConverterFloat.write(x, into: &buf)
            FfiConverterFloat.write(y, into: &buf)

        case let .pointerUp(x, y):
            writeInt(&buf, Int32(2))
            FfiConverterFloat.write(x, into: &buf)
            FfiConverterFloat.write(y, into: &buf)

        case let .pointerMove(x, y):
            writeInt(&buf, Int32(3))
            FfiConverterFloat.write(x, into: &buf)
            FfiConverterFloat.write(y, into: &buf)

        case let .pointerEnter(x, y):
            writeInt(&buf, Int32(4))
            FfiConverterFloat.write(x, into: &buf)
            FfiConverterFloat.write(y, into: &buf)

        case let .pointerExit(x, y):
            writeInt(&buf, Int32(5))
            FfiConverterFloat.write(x, into: &buf)
            FfiConverterFloat.write(y, into: &buf)

        case let .click(x, y):
            writeInt(&buf, Int32(6))
            FfiConverterFloat.write(x, into: &buf)
            FfiConverterFloat.write(y, into: &buf)

        case .onComplete:
            writeInt(&buf, Int32(7))

        case .onLoopComplete:
            writeInt(&buf, Int32(8))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEvent_lift(_ buf: RustBuffer) throws -> Event {
    return try FfiConverterTypeEvent.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEvent_lower(_ value: Event) -> RustBuffer {
    return FfiConverterTypeEvent.lower(value)
}

extension Event: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Fit {
    case contain
    case fill
    case cover
    case fitWidth
    case fitHeight
    case none
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeFit: FfiConverterRustBuffer {
    typealias SwiftType = Fit

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Fit {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .contain

        case 2: return .fill

        case 3: return .cover

        case 4: return .fitWidth

        case 5: return .fitHeight

        case 6: return .none

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Fit, into buf: inout [UInt8]) {
        switch value {
        case .contain:
            writeInt(&buf, Int32(1))

        case .fill:
            writeInt(&buf, Int32(2))

        case .cover:
            writeInt(&buf, Int32(3))

        case .fitWidth:
            writeInt(&buf, Int32(4))

        case .fitHeight:
            writeInt(&buf, Int32(5))

        case .none:
            writeInt(&buf, Int32(6))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFit_lift(_ buf: RustBuffer) throws -> Fit {
    return try FfiConverterTypeFit.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFit_lower(_ value: Fit) -> RustBuffer {
    return FfiConverterTypeFit.lower(value)
}

extension Fit: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Mode {
    case forward
    case reverse
    case bounce
    case reverseBounce
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeMode: FfiConverterRustBuffer {
    typealias SwiftType = Mode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .forward

        case 2: return .reverse

        case 3: return .bounce

        case 4: return .reverseBounce

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Mode, into buf: inout [UInt8]) {
        switch value {
        case .forward:
            writeInt(&buf, Int32(1))

        case .reverse:
            writeInt(&buf, Int32(2))

        case .bounce:
            writeInt(&buf, Int32(3))

        case .reverseBounce:
            writeInt(&buf, Int32(4))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeMode_lift(_ buf: RustBuffer) throws -> Mode {
    return try FfiConverterTypeMode.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeMode_lower(_ value: Mode) -> RustBuffer {
    return FfiConverterTypeMode.lower(value)
}

extension Mode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum OpenUrlMode {
    case deny
    case interaction
    case allow
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeOpenUrlMode: FfiConverterRustBuffer {
    typealias SwiftType = OpenUrlMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OpenUrlMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .deny

        case 2: return .interaction

        case 3: return .allow

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: OpenUrlMode, into buf: inout [UInt8]) {
        switch value {
        case .deny:
            writeInt(&buf, Int32(1))

        case .interaction:
            writeInt(&buf, Int32(2))

        case .allow:
            writeInt(&buf, Int32(3))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeOpenUrlMode_lift(_ buf: RustBuffer) throws -> OpenUrlMode {
    return try FfiConverterTypeOpenUrlMode.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeOpenUrlMode_lower(_ value: OpenUrlMode) -> RustBuffer {
    return FfiConverterTypeOpenUrlMode.lower(value)
}

extension OpenUrlMode: Equatable, Hashable {}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionFloat: FfiConverterRustBuffer {
    typealias SwiftType = Float?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterFloat.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterFloat.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeManifest: FfiConverterRustBuffer {
    typealias SwiftType = Manifest?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManifest.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManifest.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeManifestInitial: FfiConverterRustBuffer {
    typealias SwiftType = ManifestInitial?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManifestInitial.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManifestInitial.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceFloat: FfiConverterRustBuffer {
    typealias SwiftType = [Float]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceFloat.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceFloat.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceTypeManifestStateMachine: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestStateMachine]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeManifestStateMachine.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeManifestStateMachine.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceTypeManifestTheme: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestTheme]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeManifestTheme.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeManifestTheme.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceFloat: FfiConverterRustBuffer {
    typealias SwiftType = [Float]

    public static func write(_ value: [Float], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterFloat.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Float] {
        let len: Int32 = try readInt(&buf)
        var seq = [Float]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterFloat.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeManifestAnimation: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestAnimation]

    public static func write(_ value: [ManifestAnimation], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeManifestAnimation.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ManifestAnimation] {
        let len: Int32 = try readInt(&buf)
        var seq = [ManifestAnimation]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeManifestAnimation.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeManifestStateMachine: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestStateMachine]

    public static func write(_ value: [ManifestStateMachine], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeManifestStateMachine.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ManifestStateMachine] {
        let len: Int32 = try readInt(&buf)
        var seq = [ManifestStateMachine]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeManifestStateMachine.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeManifestTheme: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestTheme]

    public static func write(_ value: [ManifestTheme], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeManifestTheme.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ManifestTheme] {
        let len: Int32 = try readInt(&buf)
        var seq = [ManifestTheme]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeManifestTheme.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeMarker: FfiConverterRustBuffer {
    typealias SwiftType = [Marker]

    public static func write(_ value: [Marker], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMarker.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Marker] {
        let len: Int32 = try readInt(&buf)
        var seq = [Marker]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeMarker.read(from: &buf))
        }
        return seq
    }
}

public func createDefaultConfig() -> Config {
    return try! FfiConverterTypeConfig.lift(try! rustCall {
        uniffi_dotlottie_player_fn_func_create_default_config($0
        )
    })
}

public func createDefaultLayout() -> Layout {
    return try! FfiConverterTypeLayout.lift(try! rustCall {
        uniffi_dotlottie_player_fn_func_create_default_layout($0
        )
    })
}

public func createDefaultOpenUrl() -> OpenUrl {
    return try! FfiConverterTypeOpenUrl.lift(try! rustCall {
        uniffi_dotlottie_player_fn_func_create_default_open_url($0
        )
    })
}

public func transformThemeToLottieSlots(themeData: String, animationId: String) -> String {
    return try! FfiConverterString.lift(try! rustCall {
        uniffi_dotlottie_player_fn_func_transform_theme_to_lottie_slots(
            FfiConverterString.lower(themeData),
            FfiConverterString.lower(animationId), $0
        )
    })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_dotlottie_player_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_dotlottie_player_checksum_func_create_default_config() != 10767 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_func_create_default_layout() != 41529 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_func_create_default_open_url() != 5194 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_func_transform_theme_to_lottie_slots() != 23836 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_active_animation_id() != 57608 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_active_state_machine_id() != 55591 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_active_theme_id() != 60173 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_animation_size() != 49812 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_buffer_len() != 33793 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_buffer_ptr() != 30907 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_clear() != 26373 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_config() != 36040 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_current_frame() != 42425 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_duration() != 3831 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_get_layer_bounds() != 55811 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_get_state_machine() != 4598 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_instance_id() != 43862 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_intersect() != 12346 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_complete() != 51890 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_loaded() != 20186 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_paused() != 56658 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_playing() != 45670 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_stopped() != 28412 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_tweening() != 55447 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_animation() != 52252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_animation_data() != 63827 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_animation_path() != 5718 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_dotlottie_data() != 3402 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_loop_count() != 14780 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_manifest() != 39779 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_manifest_string() != 60193 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_markers() != 29800 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_pause() != 16452 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_play() != 54931 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_render() != 34602 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_request_frame() != 39939 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_reset_theme() != 44947 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_resize() != 16787 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_seek() != 60656 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_segment_duration() != 38024 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_config() != 39472 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_frame() != 44086 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_slots() != 64804 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_theme() != 33069 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_theme_data() != 31802 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_viewport() != 29505 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_current_state() != 16021 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_fire_event() != 43003 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_framework_setup() != 17926 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_framework_subscribe() != 38193 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_framework_unsubscribe() != 64000 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_get_boolean_input() != 55120 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_get_numeric_input() != 10400 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_get_string_input() != 47598 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_load() != 64493 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_load_data() != 34359 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_override_current_state() != 49496 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_click_event() != 63938 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_event() != 31051 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_pointer_down_event() != 16674 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_pointer_enter_event() != 59477 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_pointer_exit_event() != 11953 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_pointer_move_event() != 50488 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_post_pointer_up_event() != 24904 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_set_boolean_input() != 63405 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_set_numeric_input() != 54841 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_set_string_input() != 4923 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_start() != 32431 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_status() != 45792 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_stop() != 31070 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_subscribe() != 52020 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_state_machine_unsubscribe() != 30025 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_stop() != 25240 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_subscribe() != 45859 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_tick() != 60075 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_total_frames() != 12091 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_tween() != 57206 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_tween_stop() != 42833 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_tween_to_marker() != 26478 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_tween_update() != 11200 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_unsubscribe() != 1373 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_complete() != 24930 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_frame() != 51247 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_load() != 56735 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_load_error() != 51239 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_loop() != 7035 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_pause() != 146 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_play() != 59485 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_render() != 55581 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_stop() != 52331 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_boolean_input_value_change() != 21933 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_custom_event() != 50052 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_error() != 46774 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_input_fired() != 28837 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_numeric_input_value_change() != 49226 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_start() != 26147 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_state_entered() != 49087 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_state_exit() != 30161 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_stop() != 19940 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_string_input_value_change() != 58131 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_statemachineobserver_on_transition() != 25374 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_constructor_dotlottieplayer_new() != 34558 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitObserver()
    uniffiCallbackInitStateMachineObserver()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
