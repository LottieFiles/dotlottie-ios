// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(DotLottiePlayer)
    import DotLottiePlayer
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_dotlottie_player_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_dotlottie_player_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterInt8: FfiConverterPrimitive {
    typealias FfiType = Int8
    typealias SwiftType = Int8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol DotLottiePlayerProtocol: AnyObject {
    func bufferLen() -> UInt64

    func bufferPtr() -> UInt64

    func clear()

    func config() -> Config

    func currentFrame() -> Float

    func duration() -> Float

    func isComplete() -> Bool

    func isLoaded() -> Bool

    func isPaused() -> Bool

    func isPlaying() -> Bool

    func isStopped() -> Bool

    func loadAnimation(animationId: String, width: UInt32, height: UInt32) -> Bool

    func loadAnimationData(animationData: String, width: UInt32, height: UInt32) -> Bool

    func loadAnimationPath(animationPath: String, width: UInt32, height: UInt32) -> Bool

    func loadDotlottieData(fileData: Data, width: UInt32, height: UInt32) -> Bool

    func loopCount() -> UInt32

    func manifest() -> Manifest?

    func manifestString() -> String

    func markers() -> [Marker]

    func pause() -> Bool

    func play() -> Bool

    func render() -> Bool

    func requestFrame() -> Float

    func resize(width: UInt32, height: UInt32) -> Bool

    func seek(no: Float) -> Bool

    func setConfig(config: Config)

    func setFrame(no: Float) -> Bool

    func stop() -> Bool

    func subscribe(observer: Observer)

    func totalFrames() -> Float

    func unsubscribe(observer: Observer)
}

public class DotLottiePlayer:
    DotLottiePlayerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_dotlottie_player_fn_clone_dotlottieplayer(self.pointer, $0) }
    }

    public convenience init(config: Config) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_dotlottie_player_fn_constructor_dotlottieplayer_new(
                FfiConverterTypeConfig.lower(config), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_dotlottie_player_fn_free_dotlottieplayer(pointer, $0) }
    }

    public func bufferLen() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_buffer_len(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func bufferPtr() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_buffer_ptr(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func clear() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_dotlottieplayer_clear(self.uniffiClonePointer(), $0)
            }
    }

    public func config() -> Config {
        return try! FfiConverterTypeConfig.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_config(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func currentFrame() -> Float {
        return try! FfiConverterFloat.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_current_frame(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func duration() -> Float {
        return try! FfiConverterFloat.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_duration(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func isComplete() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_is_complete(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func isLoaded() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_is_loaded(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func isPaused() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_is_paused(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func isPlaying() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_is_playing(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func isStopped() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_is_stopped(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func loadAnimation(animationId: String, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_load_animation(self.uniffiClonePointer(),
                                                                                     FfiConverterString.lower(animationId),
                                                                                     FfiConverterUInt32.lower(width),
                                                                                     FfiConverterUInt32.lower(height), $0)
                }
        )
    }

    public func loadAnimationData(animationData: String, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_load_animation_data(self.uniffiClonePointer(),
                                                                                          FfiConverterString.lower(animationData),
                                                                                          FfiConverterUInt32.lower(width),
                                                                                          FfiConverterUInt32.lower(height), $0)
                }
        )
    }

    public func loadAnimationPath(animationPath: String, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_load_animation_path(self.uniffiClonePointer(),
                                                                                          FfiConverterString.lower(animationPath),
                                                                                          FfiConverterUInt32.lower(width),
                                                                                          FfiConverterUInt32.lower(height), $0)
                }
        )
    }

    public func loadDotlottieData(fileData: Data, width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_load_dotlottie_data(self.uniffiClonePointer(),
                                                                                          FfiConverterData.lower(fileData),
                                                                                          FfiConverterUInt32.lower(width),
                                                                                          FfiConverterUInt32.lower(height), $0)
                }
        )
    }

    public func loopCount() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_loop_count(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func manifest() -> Manifest? {
        return try! FfiConverterOptionTypeManifest.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_manifest(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func manifestString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_manifest_string(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func markers() -> [Marker] {
        return try! FfiConverterSequenceTypeMarker.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_markers(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func pause() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_pause(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func play() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_play(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func render() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_render(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func requestFrame() -> Float {
        return try! FfiConverterFloat.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_request_frame(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func resize(width: UInt32, height: UInt32) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_resize(self.uniffiClonePointer(),
                                                                             FfiConverterUInt32.lower(width),
                                                                             FfiConverterUInt32.lower(height), $0)
                }
        )
    }

    public func seek(no: Float) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_seek(self.uniffiClonePointer(),
                                                                           FfiConverterFloat.lower(no), $0)
                }
        )
    }

    public func setConfig(config: Config) {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_dotlottieplayer_set_config(self.uniffiClonePointer(),
                                                                             FfiConverterTypeConfig.lower(config), $0)
            }
    }

    public func setFrame(no: Float) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_set_frame(self.uniffiClonePointer(),
                                                                                FfiConverterFloat.lower(no), $0)
                }
        )
    }

    public func stop() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_stop(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func subscribe(observer: Observer) {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_dotlottieplayer_subscribe(self.uniffiClonePointer(),
                                                                            FfiConverterTypeObserver.lower(observer), $0)
            }
    }

    public func totalFrames() -> Float {
        return try! FfiConverterFloat.lift(
            try!
                rustCall {
                    uniffi_dotlottie_player_fn_method_dotlottieplayer_total_frames(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func unsubscribe(observer: Observer) {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_dotlottieplayer_unsubscribe(self.uniffiClonePointer(),
                                                                              FfiConverterTypeObserver.lower(observer), $0)
            }
    }
}

public struct FfiConverterTypeDotLottiePlayer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DotLottiePlayer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DotLottiePlayer {
        return DotLottiePlayer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DotLottiePlayer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DotLottiePlayer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DotLottiePlayer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDotLottiePlayer_lift(_ pointer: UnsafeMutableRawPointer) throws -> DotLottiePlayer {
    return try FfiConverterTypeDotLottiePlayer.lift(pointer)
}

public func FfiConverterTypeDotLottiePlayer_lower(_ value: DotLottiePlayer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDotLottiePlayer.lower(value)
}

public protocol Observer: AnyObject {
    func onComplete()

    func onFrame(frameNo: Float)

    func onLoad()

    func onLoadError()

    func onLoop(loopCount: UInt32)

    func onPause()

    func onPlay()

    func onRender(frameNo: Float)

    func onStop()
}

public class ObserverImpl:
    Observer
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_dotlottie_player_fn_clone_observer(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_dotlottie_player_fn_free_observer(pointer, $0) }
    }

    public func onComplete() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_complete(self.uniffiClonePointer(), $0)
            }
    }

    public func onFrame(frameNo: Float) {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_frame(self.uniffiClonePointer(),
                                                                    FfiConverterFloat.lower(frameNo), $0)
            }
    }

    public func onLoad() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_load(self.uniffiClonePointer(), $0)
            }
    }

    public func onLoadError() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_load_error(self.uniffiClonePointer(), $0)
            }
    }

    public func onLoop(loopCount: UInt32) {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_loop(self.uniffiClonePointer(),
                                                                   FfiConverterUInt32.lower(loopCount), $0)
            }
    }

    public func onPause() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_pause(self.uniffiClonePointer(), $0)
            }
    }

    public func onPlay() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_play(self.uniffiClonePointer(), $0)
            }
    }

    public func onRender(frameNo: Float) {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_render(self.uniffiClonePointer(),
                                                                     FfiConverterFloat.lower(frameNo), $0)
            }
    }

    public func onStop() {
        try!
            rustCall {
                uniffi_dotlottie_player_fn_method_observer_on_stop(self.uniffiClonePointer(), $0)
            }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for Observer Callback Interface

private let uniffiCallbackInterfaceObserver: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeOnComplete(_ swiftCallbackInterface: Observer, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.onComplete(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnFrame(_ swiftCallbackInterface: Observer, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.onFrame(
                frameNo: FfiConverterFloat.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnLoad(_ swiftCallbackInterface: Observer, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.onLoad(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnLoadError(_ swiftCallbackInterface: Observer, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.onLoadError(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnLoop(_ swiftCallbackInterface: Observer, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.onLoop(
                loopCount: FfiConverterUInt32.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnPause(_ swiftCallbackInterface: Observer, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.onPause(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnPlay(_ swiftCallbackInterface: Observer, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.onPlay(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnRender(_ swiftCallbackInterface: Observer, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.onRender(
                frameNo: FfiConverterFloat.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeOnStop(_ swiftCallbackInterface: Observer, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.onStop(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterTypeObserver.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnComplete(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 2:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnFrame(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 3:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnLoad(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 4:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnLoadError(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 5:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnLoop(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 6:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnPause(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 7:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnPlay(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 8:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnRender(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 9:
        guard let cb = FfiConverterTypeObserver.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeOnStop(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitObserver() {
    uniffi_dotlottie_player_fn_init_callback_observer(uniffiCallbackInterfaceObserver)
}

public struct FfiConverterTypeObserver: FfiConverter {
    fileprivate static var handleMap = UniFFICallbackHandleMap<Observer>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Observer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Observer {
        return ObserverImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Observer) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Observer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Observer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeObserver_lift(_ pointer: UnsafeMutableRawPointer) throws -> Observer {
    return try FfiConverterTypeObserver.lift(pointer)
}

public func FfiConverterTypeObserver_lower(_ value: Observer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeObserver.lower(value)
}

public struct Config {
    public var autoplay: Bool
    public var loopAnimation: Bool
    public var mode: Mode
    public var speed: Float
    public var useFrameInterpolation: Bool
    public var segments: [Float]
    public var backgroundColor: UInt32
    public var marker: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        autoplay: Bool,
        loopAnimation: Bool,
        mode: Mode,
        speed: Float,
        useFrameInterpolation: Bool,
        segments: [Float],
        backgroundColor: UInt32,
        marker: String
    ) {
        self.autoplay = autoplay
        self.loopAnimation = loopAnimation
        self.mode = mode
        self.speed = speed
        self.useFrameInterpolation = useFrameInterpolation
        self.segments = segments
        self.backgroundColor = backgroundColor
        self.marker = marker
    }
}

extension Config: Equatable, Hashable {
    public static func == (lhs: Config, rhs: Config) -> Bool {
        if lhs.autoplay != rhs.autoplay {
            return false
        }
        if lhs.loopAnimation != rhs.loopAnimation {
            return false
        }
        if lhs.mode != rhs.mode {
            return false
        }
        if lhs.speed != rhs.speed {
            return false
        }
        if lhs.useFrameInterpolation != rhs.useFrameInterpolation {
            return false
        }
        if lhs.segments != rhs.segments {
            return false
        }
        if lhs.backgroundColor != rhs.backgroundColor {
            return false
        }
        if lhs.marker != rhs.marker {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(autoplay)
        hasher.combine(loopAnimation)
        hasher.combine(mode)
        hasher.combine(speed)
        hasher.combine(useFrameInterpolation)
        hasher.combine(segments)
        hasher.combine(backgroundColor)
        hasher.combine(marker)
    }
}

public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                autoplay: FfiConverterBool.read(from: &buf),
                loopAnimation: FfiConverterBool.read(from: &buf),
                mode: FfiConverterTypeMode.read(from: &buf),
                speed: FfiConverterFloat.read(from: &buf),
                useFrameInterpolation: FfiConverterBool.read(from: &buf),
                segments: FfiConverterSequenceFloat.read(from: &buf),
                backgroundColor: FfiConverterUInt32.read(from: &buf),
                marker: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.autoplay, into: &buf)
        FfiConverterBool.write(value.loopAnimation, into: &buf)
        FfiConverterTypeMode.write(value.mode, into: &buf)
        FfiConverterFloat.write(value.speed, into: &buf)
        FfiConverterBool.write(value.useFrameInterpolation, into: &buf)
        FfiConverterSequenceFloat.write(value.segments, into: &buf)
        FfiConverterUInt32.write(value.backgroundColor, into: &buf)
        FfiConverterString.write(value.marker, into: &buf)
    }
}

public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}

public struct Manifest {
    public var activeAnimationId: String?
    public var animations: [ManifestAnimation]
    public var author: String?
    public var description: String?
    public var generator: String?
    public var keywords: String?
    public var revision: UInt32?
    public var themes: [ManifestTheme]?
    public var states: [String]?
    public var version: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        activeAnimationId: String?,
        animations: [ManifestAnimation],
        author: String?,
        description: String?,
        generator: String?,
        keywords: String?,
        revision: UInt32?,
        themes: [ManifestTheme]?,
        states: [String]?,
        version: String?
    ) {
        self.activeAnimationId = activeAnimationId
        self.animations = animations
        self.author = author
        self.description = description
        self.generator = generator
        self.keywords = keywords
        self.revision = revision
        self.themes = themes
        self.states = states
        self.version = version
    }
}

extension Manifest: Equatable, Hashable {
    public static func == (lhs: Manifest, rhs: Manifest) -> Bool {
        if lhs.activeAnimationId != rhs.activeAnimationId {
            return false
        }
        if lhs.animations != rhs.animations {
            return false
        }
        if lhs.author != rhs.author {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.generator != rhs.generator {
            return false
        }
        if lhs.keywords != rhs.keywords {
            return false
        }
        if lhs.revision != rhs.revision {
            return false
        }
        if lhs.themes != rhs.themes {
            return false
        }
        if lhs.states != rhs.states {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(activeAnimationId)
        hasher.combine(animations)
        hasher.combine(author)
        hasher.combine(description)
        hasher.combine(generator)
        hasher.combine(keywords)
        hasher.combine(revision)
        hasher.combine(themes)
        hasher.combine(states)
        hasher.combine(version)
    }
}

public struct FfiConverterTypeManifest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Manifest {
        return
            try Manifest(
                activeAnimationId: FfiConverterOptionString.read(from: &buf),
                animations: FfiConverterSequenceTypeManifestAnimation.read(from: &buf),
                author: FfiConverterOptionString.read(from: &buf),
                description: FfiConverterOptionString.read(from: &buf),
                generator: FfiConverterOptionString.read(from: &buf),
                keywords: FfiConverterOptionString.read(from: &buf),
                revision: FfiConverterOptionUInt32.read(from: &buf),
                themes: FfiConverterOptionSequenceTypeManifestTheme.read(from: &buf),
                states: FfiConverterOptionSequenceString.read(from: &buf),
                version: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: Manifest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.activeAnimationId, into: &buf)
        FfiConverterSequenceTypeManifestAnimation.write(value.animations, into: &buf)
        FfiConverterOptionString.write(value.author, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionString.write(value.generator, into: &buf)
        FfiConverterOptionString.write(value.keywords, into: &buf)
        FfiConverterOptionUInt32.write(value.revision, into: &buf)
        FfiConverterOptionSequenceTypeManifestTheme.write(value.themes, into: &buf)
        FfiConverterOptionSequenceString.write(value.states, into: &buf)
        FfiConverterOptionString.write(value.version, into: &buf)
    }
}

public func FfiConverterTypeManifest_lift(_ buf: RustBuffer) throws -> Manifest {
    return try FfiConverterTypeManifest.lift(buf)
}

public func FfiConverterTypeManifest_lower(_ value: Manifest) -> RustBuffer {
    return FfiConverterTypeManifest.lower(value)
}

public struct ManifestAnimation {
    public var autoplay: Bool?
    public var defaultTheme: String?
    public var direction: Int8?
    public var hover: Bool?
    public var id: String
    public var intermission: UInt32?
    public var loop: Bool?
    public var loopCount: UInt32?
    public var playMode: String?
    public var speed: UInt32?
    public var themeColor: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        autoplay: Bool?,
        defaultTheme: String?,
        direction: Int8?,
        hover: Bool?,
        id: String,
        intermission: UInt32?,
        loop: Bool?,
        loopCount: UInt32?,
        playMode: String?,
        speed: UInt32?,
        themeColor: String?
    ) {
        self.autoplay = autoplay
        self.defaultTheme = defaultTheme
        self.direction = direction
        self.hover = hover
        self.id = id
        self.intermission = intermission
        self.loop = loop
        self.loopCount = loopCount
        self.playMode = playMode
        self.speed = speed
        self.themeColor = themeColor
    }
}

extension ManifestAnimation: Equatable, Hashable {
    public static func == (lhs: ManifestAnimation, rhs: ManifestAnimation) -> Bool {
        if lhs.autoplay != rhs.autoplay {
            return false
        }
        if lhs.defaultTheme != rhs.defaultTheme {
            return false
        }
        if lhs.direction != rhs.direction {
            return false
        }
        if lhs.hover != rhs.hover {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        if lhs.intermission != rhs.intermission {
            return false
        }
        if lhs.loop != rhs.loop {
            return false
        }
        if lhs.loopCount != rhs.loopCount {
            return false
        }
        if lhs.playMode != rhs.playMode {
            return false
        }
        if lhs.speed != rhs.speed {
            return false
        }
        if lhs.themeColor != rhs.themeColor {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(autoplay)
        hasher.combine(defaultTheme)
        hasher.combine(direction)
        hasher.combine(hover)
        hasher.combine(id)
        hasher.combine(intermission)
        hasher.combine(loop)
        hasher.combine(loopCount)
        hasher.combine(playMode)
        hasher.combine(speed)
        hasher.combine(themeColor)
    }
}

public struct FfiConverterTypeManifestAnimation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManifestAnimation {
        return
            try ManifestAnimation(
                autoplay: FfiConverterOptionBool.read(from: &buf),
                defaultTheme: FfiConverterOptionString.read(from: &buf),
                direction: FfiConverterOptionInt8.read(from: &buf),
                hover: FfiConverterOptionBool.read(from: &buf),
                id: FfiConverterString.read(from: &buf),
                intermission: FfiConverterOptionUInt32.read(from: &buf),
                loop: FfiConverterOptionBool.read(from: &buf),
                loopCount: FfiConverterOptionUInt32.read(from: &buf),
                playMode: FfiConverterOptionString.read(from: &buf),
                speed: FfiConverterOptionUInt32.read(from: &buf),
                themeColor: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: ManifestAnimation, into buf: inout [UInt8]) {
        FfiConverterOptionBool.write(value.autoplay, into: &buf)
        FfiConverterOptionString.write(value.defaultTheme, into: &buf)
        FfiConverterOptionInt8.write(value.direction, into: &buf)
        FfiConverterOptionBool.write(value.hover, into: &buf)
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionUInt32.write(value.intermission, into: &buf)
        FfiConverterOptionBool.write(value.loop, into: &buf)
        FfiConverterOptionUInt32.write(value.loopCount, into: &buf)
        FfiConverterOptionString.write(value.playMode, into: &buf)
        FfiConverterOptionUInt32.write(value.speed, into: &buf)
        FfiConverterOptionString.write(value.themeColor, into: &buf)
    }
}

public func FfiConverterTypeManifestAnimation_lift(_ buf: RustBuffer) throws -> ManifestAnimation {
    return try FfiConverterTypeManifestAnimation.lift(buf)
}

public func FfiConverterTypeManifestAnimation_lower(_ value: ManifestAnimation) -> RustBuffer {
    return FfiConverterTypeManifestAnimation.lower(value)
}

public struct ManifestTheme {
    public var id: String
    public var animations: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        id: String,
        animations: [String]
    ) {
        self.id = id
        self.animations = animations
    }
}

extension ManifestTheme: Equatable, Hashable {
    public static func == (lhs: ManifestTheme, rhs: ManifestTheme) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.animations != rhs.animations {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(animations)
    }
}

public struct FfiConverterTypeManifestTheme: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManifestTheme {
        return
            try ManifestTheme(
                id: FfiConverterString.read(from: &buf),
                animations: FfiConverterSequenceString.read(from: &buf)
            )
    }

    public static func write(_ value: ManifestTheme, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterSequenceString.write(value.animations, into: &buf)
    }
}

public func FfiConverterTypeManifestTheme_lift(_ buf: RustBuffer) throws -> ManifestTheme {
    return try FfiConverterTypeManifestTheme.lift(buf)
}

public func FfiConverterTypeManifestTheme_lower(_ value: ManifestTheme) -> RustBuffer {
    return FfiConverterTypeManifestTheme.lower(value)
}

public struct Marker {
    public var name: String
    public var time: Float
    public var duration: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        name: String,
        time: Float,
        duration: Float
    ) {
        self.name = name
        self.time = time
        self.duration = duration
    }
}

extension Marker: Equatable, Hashable {
    public static func == (lhs: Marker, rhs: Marker) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.time != rhs.time {
            return false
        }
        if lhs.duration != rhs.duration {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(time)
        hasher.combine(duration)
    }
}

public struct FfiConverterTypeMarker: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Marker {
        return
            try Marker(
                name: FfiConverterString.read(from: &buf),
                time: FfiConverterFloat.read(from: &buf),
                duration: FfiConverterFloat.read(from: &buf)
            )
    }

    public static func write(_ value: Marker, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterFloat.write(value.time, into: &buf)
        FfiConverterFloat.write(value.duration, into: &buf)
    }
}

public func FfiConverterTypeMarker_lift(_ buf: RustBuffer) throws -> Marker {
    return try FfiConverterTypeMarker.lift(buf)
}

public func FfiConverterTypeMarker_lower(_ value: Marker) -> RustBuffer {
    return FfiConverterTypeMarker.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Mode {
    case forward
    case reverse
    case bounce
    case reverseBounce
}

public struct FfiConverterTypeMode: FfiConverterRustBuffer {
    typealias SwiftType = Mode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .forward

        case 2: return .reverse

        case 3: return .bounce

        case 4: return .reverseBounce

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Mode, into buf: inout [UInt8]) {
        switch value {
        case .forward:
            writeInt(&buf, Int32(1))

        case .reverse:
            writeInt(&buf, Int32(2))

        case .bounce:
            writeInt(&buf, Int32(3))

        case .reverseBounce:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeMode_lift(_ buf: RustBuffer) throws -> Mode {
    return try FfiConverterTypeMode.lift(buf)
}

public func FfiConverterTypeMode_lower(_ value: Mode) -> RustBuffer {
    return FfiConverterTypeMode.lower(value)
}

extension Mode: Equatable, Hashable {}

private struct FfiConverterOptionInt8: FfiConverterRustBuffer {
    typealias SwiftType = Int8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeManifest: FfiConverterRustBuffer {
    typealias SwiftType = Manifest?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManifest.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManifest.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceTypeManifestTheme: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestTheme]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeManifestTheme.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeManifestTheme.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceFloat: FfiConverterRustBuffer {
    typealias SwiftType = [Float]

    public static func write(_ value: [Float], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterFloat.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Float] {
        let len: Int32 = try readInt(&buf)
        var seq = [Float]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterFloat.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeManifestAnimation: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestAnimation]

    public static func write(_ value: [ManifestAnimation], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeManifestAnimation.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ManifestAnimation] {
        let len: Int32 = try readInt(&buf)
        var seq = [ManifestAnimation]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeManifestAnimation.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeManifestTheme: FfiConverterRustBuffer {
    typealias SwiftType = [ManifestTheme]

    public static func write(_ value: [ManifestTheme], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeManifestTheme.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ManifestTheme] {
        let len: Int32 = try readInt(&buf)
        var seq = [ManifestTheme]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeManifestTheme.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeMarker: FfiConverterRustBuffer {
    typealias SwiftType = [Marker]

    public static func write(_ value: [Marker], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMarker.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Marker] {
        let len: Int32 = try readInt(&buf)
        var seq = [Marker]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeMarker.read(from: &buf))
        }
        return seq
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_dotlottie_player_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_buffer_len() != 33793 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_buffer_ptr() != 30907 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_clear() != 26373 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_config() != 36040 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_current_frame() != 42425 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_duration() != 3831 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_complete() != 51890 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_loaded() != 20186 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_paused() != 56658 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_playing() != 45670 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_is_stopped() != 28412 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_animation() != 52252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_animation_data() != 63827 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_animation_path() != 5718 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_load_dotlottie_data() != 3402 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_loop_count() != 14780 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_manifest() != 39779 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_manifest_string() != 60193 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_markers() != 29800 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_pause() != 16452 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_play() != 54931 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_render() != 34602 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_request_frame() != 39939 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_resize() != 16787 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_seek() != 60656 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_config() != 39472 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_set_frame() != 44086 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_stop() != 25240 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_subscribe() != 45859 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_total_frames() != 12091 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_dotlottieplayer_unsubscribe() != 1373 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_complete() != 24930 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_frame() != 51247 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_load() != 56735 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_load_error() != 51239 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_loop() != 7035 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_pause() != 146 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_play() != 59485 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_render() != 55581 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_method_observer_on_stop() != 52331 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_dotlottie_player_checksum_constructor_dotlottieplayer_new() != 61364 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitObserver()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
